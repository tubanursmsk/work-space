import { inject } from '@angular/core';
import { CanActivateFn } from '@angular/router'; //CanActivateFn: Bu bir guard fonksiyonu tÃ¼rÃ¼dÃ¼r, route'a eriÅŸim verilip verilmeyeceÄŸini belirler.
import { Api } from './services/api'; //Api: Uygulamadaki backend ile haberleÅŸen servis (Ã¶rneÄŸin, userProfileSync() ile token doÄŸrulama yapÄ±yor).
import { lastValueFrom } from 'rxjs'; //lastValueFrom: RxJS'deki bir Observable'Ä± Promise'e Ã§evirir. Yani await ile kullanÄ±labilir hÃ¢le getirir.

export const notauthGuard: CanActivateFn = async (route, state) => { //Bu fonksiyon bir route'a eriÅŸmeden Ã¶nce devreye girer. Asenkron Ã§alÄ±ÅŸÄ±r (Ã§Ã¼nkÃ¼ await var).
  const api = inject(Api); //api: Servis sÄ±nÄ±fÄ± (Api) enjekte ediliyor.
  const stToken = localStorage.getItem('token') //stToken: KullanÄ±cÄ±nÄ±n localStorage'daki token'Ä± alÄ±nÄ±r. (EÄŸer giriÅŸ yaptÄ±ysa token vardÄ±r.)
  if (stToken) {
    try {
      const res = await lastValueFrom( api.userProfileSync() )
      if(res) {
        window.location.replace('/products')
        return false
      }
    } catch (error) {
      localStorage.removeItem('token')
      window.location.reload()
      return true
    }
  }
  return true
};
/*AÃ§Ä±klama:
EÄŸer token varsa, userProfileSync() Ã§aÄŸrÄ±lÄ±r. Bu bÃ¼yÃ¼k olasÄ±lÄ±kla sunucuda token geÃ§erli mi diye kontrol eden bir API Ã§aÄŸrÄ±sÄ±dÄ±r.
EÄŸer geÃ§erliyse (res dÃ¶nÃ¼yorsa), kullanÄ±cÄ± /products sayfasÄ±na yÃ¶nlendirilir. Ã‡Ã¼nkÃ¼ zaten giriÅŸ yapmÄ±ÅŸ biri login gibi sayfaya gitmemeli.
return false: Bu route'a geÃ§ilmesine izin verme anlamÄ±na gelir.
EÄŸer catch bloÄŸuna dÃ¼ÅŸerse (token geÃ§ersiz, sunucu hatasÄ± vs.):
token temizlenir.
Sayfa yenilenir.
Route'a geÃ§mesine izin verilir (return true).
ğŸ’¡ Token Yoksa: kullanÄ±cÄ± zaten oturum aÃ§mamÄ±ÅŸ demektir. Bu durumda route'a gitmesine izin verilir. Ã–rneÄŸin, /login ya da /register gibi.*/